// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Approval entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Approval must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Approval", id.toString(), this);
    }
  }

  static load(id: string): Approval | null {
    return changetype<Approval | null>(store.get("Approval", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value!.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ApprovalForAll entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ApprovalForAll must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ApprovalForAll", id.toString(), this);
    }
  }

  static load(id: string): ApprovalForAll | null {
    return changetype<ApprovalForAll | null>(store.get("ApprovalForAll", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value!.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value!.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class CommentAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommentAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CommentAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CommentAdded", id.toString(), this);
    }
  }

  static load(id: string): CommentAdded | null {
    return changetype<CommentAdded | null>(store.get("CommentAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get commentAdded_content(): string {
    let value = this.get("commentAdded_content");
    return value!.toString();
  }

  set commentAdded_content(value: string) {
    this.set("commentAdded_content", Value.fromString(value));
  }

  get commentAdded_authorId(): BigInt {
    let value = this.get("commentAdded_authorId");
    return value!.toBigInt();
  }

  set commentAdded_authorId(value: BigInt) {
    this.set("commentAdded_authorId", Value.fromBigInt(value));
  }

  get commentAdded_date(): BigInt {
    let value = this.get("commentAdded_date");
    return value!.toBigInt();
  }

  set commentAdded_date(value: BigInt) {
    this.set("commentAdded_date", Value.fromBigInt(value));
  }

  get postId(): string {
    let value = this.get("postId");
    return value!.toString();
  }

  set postId(value: string) {
    this.set("postId", Value.fromString(value));
  }
}

export class PostAdded extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostAdded must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostAdded", id.toString(), this);
    }
  }

  static load(id: string): PostAdded | null {
    return changetype<PostAdded | null>(store.get("PostAdded", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get postAdded_title(): string {
    let value = this.get("postAdded_title");
    return value!.toString();
  }

  set postAdded_title(value: string) {
    this.set("postAdded_title", Value.fromString(value));
  }

  get postAdded_content(): string {
    let value = this.get("postAdded_content");
    return value!.toString();
  }

  set postAdded_content(value: string) {
    this.set("postAdded_content", Value.fromString(value));
  }

  get postAdded_picture(): string {
    let value = this.get("postAdded_picture");
    return value!.toString();
  }

  set postAdded_picture(value: string) {
    this.set("postAdded_picture", Value.fromString(value));
  }

  get postAdded_video(): string {
    let value = this.get("postAdded_video");
    return value!.toString();
  }

  set postAdded_video(value: string) {
    this.set("postAdded_video", Value.fromString(value));
  }

  get postAdded_authorId(): BigInt {
    let value = this.get("postAdded_authorId");
    return value!.toBigInt();
  }

  set postAdded_authorId(value: BigInt) {
    this.set("postAdded_authorId", Value.fromBigInt(value));
  }

  get postAdded_date(): BigInt {
    let value = this.get("postAdded_date");
    return value!.toBigInt();
  }

  set postAdded_date(value: BigInt) {
    this.set("postAdded_date", Value.fromBigInt(value));
  }
}

export class ProfileFollowed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileFollowed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileFollowed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileFollowed", id.toString(), this);
    }
  }

  static load(id: string): ProfileFollowed | null {
    return changetype<ProfileFollowed | null>(store.get("ProfileFollowed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get follower(): BigInt {
    let value = this.get("follower");
    return value!.toBigInt();
  }

  set follower(value: BigInt) {
    this.set("follower", Value.fromBigInt(value));
  }

  get followed(): BigInt {
    let value = this.get("followed");
    return value!.toBigInt();
  }

  set followed(value: BigInt) {
    this.set("followed", Value.fromBigInt(value));
  }
}

export class ProfileNFTMinted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProfileNFTMinted entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ProfileNFTMinted must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProfileNFTMinted", id.toString(), this);
    }
  }

  static load(id: string): ProfileNFTMinted | null {
    return changetype<ProfileNFTMinted | null>(
      store.get("ProfileNFTMinted", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    return value!.toBytes();
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get memberData_username(): string {
    let value = this.get("memberData_username");
    return value!.toString();
  }

  set memberData_username(value: string) {
    this.set("memberData_username", Value.fromString(value));
  }

  get memberData_profilePicture(): string {
    let value = this.get("memberData_profilePicture");
    return value!.toString();
  }

  set memberData_profilePicture(value: string) {
    this.set("memberData_profilePicture", Value.fromString(value));
  }

  get memberData_followers(): BigInt {
    let value = this.get("memberData_followers");
    return value!.toBigInt();
  }

  set memberData_followers(value: BigInt) {
    this.set("memberData_followers", Value.fromBigInt(value));
  }

  get memberData_posts(): BigInt {
    let value = this.get("memberData_posts");
    return value!.toBigInt();
  }

  set memberData_posts(value: BigInt) {
    this.set("memberData_posts", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Transfer must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value!.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}
